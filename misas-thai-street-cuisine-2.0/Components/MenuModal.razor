@using misas_thai_street_cuisine_2._0.Models

@inject ShoppingCartService Cart

<div class="menu-modal-overlay" @onclick="OnOverlayClick">
    <div class="menu-modal" @onclick:stopPropagation>
        <button class="menu-modal-close" @onclick="OnClose" @onclick:stopPropagation>&times;</button>
        @if (MenuItem != null)
        {
            <div class="menu-modal-img-block">
                <img src="@MenuItem.ImageUrl" alt="@MenuItem.Name" class="menu-modal-img" />
            </div>
            <div class="menu-modal-content">

                <h2 class="menu-modal-title">@MenuItem.Name</h2>
                <div class="menu-modal-desc">@MenuItem.Description</div>
                @if (MenuItem is Platter platter)
                {
                    @* <div class="menu-modal-includes">
                        <span style="font-weight:bold;">Includes </span>
                        @if (platter.Includes != null && platter.Includes.Count > 0)
                        {
                            <span> @string.Join(" \u2022 ", platter.Includes)</span>
                        }
                    </div> *@
                    <div class="modal-cart-section">
                        @foreach (var serve in platter.Serves)
                        {
                            <div class="serving-row">
                                <div class="cart-row">
                                    <span class="cart-label">Platter for @serve</span>
                                    <span class="cart-price">$@platter.Prices[serve]</span>
                                    <button class="cart-btn" @onclick="async () => await ChangePlatterQty(serve, -1)">−</button>
                                    <span class="cart-qty">@GetPlatterQty(serve)</span>
                                    <button class="cart-btn" @onclick="async () => await ChangePlatterQty(serve, 1)">+</button>
                                </div>
                                <div class="portion-guide">
                                    <span>@platter.Includes[serve]</span>
                                </div>
                                @if (serve == 2)
                                {

                                    <div class="cart-upgrade-row @(GetPlatterQty(2) > 0 ? "slide-in" : "slide-out")">
                                        <div class="cart-upgrade-option">
                                            <span class="cart-upgrade-label"><b>Upgrade:</b> Swap rice for 24 oz Phad Thai – <b>add $9</b></span>
                                            <button class="cart-upgrade-btn" @onclick="async () => await ChangePhadThai24(-1)">−</button>
                                            <span class="cart-qty">@PhadThai24Qty</span>
                                            <button class="cart-upgrade-btn" @onclick="async () => await ChangePhadThai24(1)">+</button>
                                        </div>
                                    </div>
                                }
                                @if (serve == 4)
                                {
                                    <div class="cart-upgrade-row @(GetPlatterQty(4) > 0 ? "slide-in" : "slide-out")">
                                        <div class="cart-upgrade-option">
                                            <span class="cart-upgrade-label"><b>Upgrade:</b> Swap rice for 48 oz Phad Thai – <b>add $18</b></span>
                                            <button class="cart-upgrade-btn" @onclick="async () => await ChangePhadThai48(-1)">−</button>
                                            <span class="cart-qty">@PhadThai48Qty</span>
                                            <button class="cart-upgrade-btn" @onclick="async () => await ChangePhadThai48(1)">+</button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
                else if (MenuItem is SideDish side)
                {
                    <div class="modal-cart-section">
                        <div class="cart-row">
                            <span class="cart-label">@side.Name</span>
                            <span class="cart-price">$@side.Price</span>
                            <button class="cart-btn" @onclick="async () => await ChangeSideQty(-1)">−</button>
                            <span class="cart-qty">@SideQty</span>
                            <button class="cart-btn" @onclick="async () => await ChangeSideQty(1)">+</button>
                        </div>
                    </div>
                }
                @ChildContent
                <div class="modal-actions-section">
                    <button class="modal-keep-shopping-btn" @onclick="OnClose" @onclick:stopPropagation>Keep Shopping</button>
                    <button class="modal-checkout-btn" @onclick="GoToCart" @onclick:stopPropagation>Check Out</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public MenuItem? MenuItem { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    private Dictionary<int, int> PlatterQty = new Dictionary<int, int> { { 2, 0 }, { 4, 0 } };
    private int PhadThai24Qty = 0;
    private int PhadThai48Qty = 0;
    private int SideQty = 0;

    protected override void OnParametersSet()
    {
        if (MenuItem is Platter platter)
        {
            // Reset
            PlatterQty[2] = 0;
            PlatterQty[4] = 0;
            PhadThai24Qty = 0;
            PhadThai48Qty = 0;
            // Check cart for each serve
            foreach (var serve in platter.Serves)
            {
                var match = Cart.Items.FirstOrDefault(i =>
                    i.Item.Name == platter.Name &&
                    i.SelectedServes == serve);
                if (match != null)
                {
                    PlatterQty[serve] = match.Quantity;
                    if (serve == 2) PhadThai24Qty = match.UpgradePhadThai24Qty;
                    if (serve == 4) PhadThai48Qty = match.UpgradePhadThai48Qty;
                }
            }
        }
        else if (MenuItem is SideDish side)
        {
            var match = Cart.Items.FirstOrDefault(i => i.Item.Name == side.Name);
            SideQty = match?.Quantity ?? 0;
        }
    }

    private void OnOverlayClick()
    {
        OnClose.InvokeAsync();
    }

    private void GoToCart()
    {
        OnClose.InvokeAsync();
        Navigation.NavigateTo("/cart");
    }

    private async Task ChangeSideQty(int delta)
    {
        SideQty = Math.Max(0, SideQty + delta);
        await UpdateSideInCart();
    }

    private async Task ChangePlatterQty(int serves, int delta)
    {
        if (!PlatterQty.ContainsKey(serves))
            PlatterQty[serves] = 0;
        PlatterQty[serves] = Math.Max(0, PlatterQty[serves] + delta);
        // Clamp upgrades to parent qty
        if (serves == 2) PhadThai24Qty = Math.Min(PhadThai24Qty, PlatterQty[2]);
        if (serves == 4) PhadThai48Qty = Math.Min(PhadThai48Qty, PlatterQty[4]);
        // If parent qty is zero, reset upgrades
        if (serves == 2 && PlatterQty[2] == 0) PhadThai24Qty = 0;
        if (serves == 4 && PlatterQty[4] == 0) PhadThai48Qty = 0;
        await UpdatePlatterInCart(serves);
    }

    private int GetPlatterQty(int serves)
    {
        return PlatterQty.ContainsKey(serves) ? PlatterQty[serves] : 0;
    }

    private async Task ChangePhadThai24(int delta)
    {
        int parentQty = GetPlatterQty(2);
        if (parentQty > 0)
        {
            PhadThai24Qty = Math.Max(0, Math.Min(parentQty, PhadThai24Qty + delta));
            await UpdatePlatterInCart(2);
        }
    }
    private async Task ChangePhadThai48(int delta)
    {
        int parentQty = GetPlatterQty(4);
        if (parentQty > 0)
        {
            PhadThai48Qty = Math.Max(0, Math.Min(parentQty, PhadThai48Qty + delta));
            await UpdatePlatterInCart(4);
        }
    }
    // Update or remove platter in cart for a given serve size
    private async Task UpdatePlatterInCart(int serves)
    {
        if (MenuItem is Platter platter)
        {
            var qty = GetPlatterQty(serves);
            int upgrade24 = (serves == 2) ? PhadThai24Qty : 0;
            int upgrade48 = (serves == 4) ? PhadThai48Qty : 0;
            // Always remove all CartItems for this platter/serve
            var matches = Cart.Items.Where(i =>
                i.Item.Name == platter.Name &&
                i.SelectedServes == serves).ToList();
            foreach (var match in matches)
            {
                await Cart.RemoveAllAsync(match);
            }
            // Add a single CartItem with current qty and upgrades if qty > 0
            if (qty > 0)
            {
                var cartItem = new CartItem(platter, qty, serves, upgrade24, upgrade48);
                await Cart.AddItemAsync(cartItem);
            }
        }
    }

    // Update or remove side dish in cart
    private async Task UpdateSideInCart()
    {
        if (MenuItem is SideDish side)
        {
            var match = Cart.Items.FirstOrDefault(i => i.Item.Name == side.Name);
            if (SideQty > 0)
            {
                await Cart.AddItemAsync(new CartItem(side, SideQty));
            }
            else if (match != null)
            {
                await Cart.RemoveAllAsync(match);
            }
        }
    }
}
