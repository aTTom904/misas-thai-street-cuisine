@page "/FinalizeOrder"
@using System.Linq
@using misas_thai_street_cuisine_2._0.Models
@using misas_thai_street_cuisine_2._0.Services
@inject ShoppingCartService Cart
@inject SquarePaymentService PaymentService
@inject OrderApiService OrderApi
@inject OrderContextService OrderContext
@inject DeadlineService DeadlineService
@inject DeliveryValidationService DeliveryValidation

<div class="checkout-container">
    <h2>Checkout</h2>
    @if ((Cart?.Items != null && Cart.Items.Count > 0) || currentStep == 2)
    {
        <div class="checkout-content">
            @if (currentStep != 2)
            {
                <!-- Order Summary (only show on steps 0 and 1) -->
                <div class="order-summary">
                    <h4>Order Summary</h4>
                    <div class="cart-items">
                        @if (Cart?.Items != null)
                        {
                            @foreach (var item in Cart.Items)
                            {
                                if (item != null && item.Item != null)
                                {
                                    <div class="cart-item">
                                        <div class="item-info">
                                            <span class="item-name">@item.Item.Name</span>
                                            @if (item.SelectedServes.HasValue)
                                            {
                                                <span class="item-serves">Serves @item.SelectedServes</span>
                                            }
                                            @if (item.UpgradePhadThai24Qty > 0)
                                            {
                                                <span class="item-upgrade">@item.UpgradePhadThai24Qty x swap Pad Thai (24oz)</span>
                                            }
                                            @if (item.UpgradePhadThai48Qty > 0)
                                            {
                                                <span class="item-upgrade">@item.UpgradePhadThai48Qty x swap Pad Thai (48oz)</span>
                                            }
                                        </div>
                                        <div class="item-quantity">Qty: @item.Quantity</div>
                                        <div class="item-total">$@(item.GetTotalPrice().ToString("F2"))</div>
                                    </div>
                                }
                                else
                                {
                                    <div class="cart-item">
                                        <span class="item-name text-danger">Invalid item</span>
                                    </div>
                                }
                            }
                        }
                    </div>
                    <div class="total-section">
                        @if (tipAmount > 0)
                        {
                            <div class="subtotal-line">
                                <span>Subtotal: $@(cartTotal.ToString("F2"))</span>
                            </div>
                            <div class="tip-line">
                                <span>Tip: $@(tipAmount.ToString("F2"))</span>
                            </div>
                            <div class="total-line">
                                <strong>Total: $@(GetTotalWithTip().ToString("F2"))</strong>
                            </div>
                        }
                        else
                        {
                            <strong>Total: $@(cartTotal.ToString("F2"))</strong>
                        }
                    </div>
                </div>
            }

            @if (currentStep == 0)
            {
                <!-- Customer Information Step --> 
                <div class="customer-info">
                    <h4>Customer Information</h4>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    <div class="form-group">
                        <label>Delivery Date *</label>
                        <select @bind="SelectedDeliveryDate" class="form-control delivery-date-select" required>
                            <option value="">Select a delivery date</option>
                            @foreach (var date in availableDeliveryDates)
                            {
                                <option value="@date.ToString("yyyy-MM-dd")">@date.ToString("MMMM dd, yyyy (dddd)")</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Full Name *</label>
                        <input type="text" @bind="customerName" @bind:event="oninput" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label>Email *</label>
                        <input type="email" @bind="customerEmail" @bind:event="oninput" class="form-control" required />
                        @if (!string.IsNullOrWhiteSpace(customerEmail) && !IsValidEmail(customerEmail))
                        {
                            <small class="text-danger">Please enter a valid email address</small>
                        }
                    </div>
                    <div class="form-group">
                        <label>Phone *</label>
                        <input type="tel" @bind="customerPhone" @bind:event="oninput" 
                               class="form-control" 
                               pattern="[0-9\s\(\)\-\.]*" 
                               title="Please enter a valid 10-digit phone number"
                               maxlength="14"
                               required />
                        @if (!string.IsNullOrWhiteSpace(customerPhone) && !IsValidPhoneNumber(customerPhone))
                        {
                            <small class="text-danger">Please enter a valid 10-digit phone number</small>
                        }
                    </div>
                    <div class="form-group">
                        <label>Additional Information</label>
                        <textarea @bind="additionalInformation" @bind:event="oninput" class="form-control additional-info-textarea" 
                                  placeholder="Delivery instructions, allergy information, special requests, etc." 
                                  rows="3"></textarea>
                    </div>
                    <div class="delivery-address-section">
                        <label>Delivery Address *</label>
                        <div class="address-fields">
                            <input type="text" @bind="streetAddress" @bind:event="oninput" class="form-control address-input" placeholder="Street Address" required />
                            <div class="city-state-zip">
                                <input type="text" @bind="city" @bind:event="oninput" class="form-control city-input" placeholder="City" required />
                                <select @bind="state" class="form-control state-input" required>
                                    <option value="Florida">Florida</option>
                                </select>
                                <input type="text" @bind="zipCode" @bind:event="oninput" class="form-control zip-input" placeholder="Zip Code" required />
                            </div>
                        </div>
                        <div class="address-validation mt-2">
                            <button type="button" class="btn btn-brand-orange btn-sm" @onclick="CheckDeliveryArea" 
                                    disabled="@(string.IsNullOrWhiteSpace(streetAddress) || string.IsNullOrWhiteSpace(city) || string.IsNullOrWhiteSpace(zipCode))">
                                Check Delivery Availability
                            </button>
                            @if (!string.IsNullOrEmpty(deliveryValidationMessage))
                            {
                                <div class="delivery-message mt-2 @deliveryValidationCssClass">
                                    @deliveryValidationMessage
                                </div>
                            }
                            @if (!isInDeliveryArea && !string.IsNullOrWhiteSpace(streetAddress) && !string.IsNullOrWhiteSpace(city) && !string.IsNullOrWhiteSpace(zipCode))
                            {
                                <div class="alert alert-info mt-2">
                                    <small><i class="fas fa-info-circle"></i> Address verification required before checkout</small>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="form-group consent-section">
                        <div class="form-check">
                            <input type="checkbox" @bind="consentToUpdates" class="form-check-input" id="consentCheckbox" />
                            <label class="form-check-label" for="consentCheckbox">
                                I consent to receive promotional emails and text messages about special offers, new menu items, and restaurant updates from Misa's Thai Street Cuisine.
                            </label>
                        </div>
                        <small class="form-text text-muted">
                            You can unsubscribe at any time. Standard message and data rates may apply for text messages.
                        </small>
                    </div>
                    
                    @if (cartTotal < minimumOrder)
                    {
                        <div class="minimum-order-notice">
                            $@((minimumOrder - cartTotal).ToString("F2")) more needed to reach the $@minimumOrder.ToString("F2") minimum for delivery.
                        </div>
                    }
                    
                    <div class="button-container" title="@GetProceedButtonTooltip()">
                        <button class="btn btn-primary" @onclick="ProceedToPayment" disabled="@(!IsCustomerInfoValid())">
                            Proceed to Payment
                        </button>
                    </div>
                </div>
            }
            else if (currentStep == 1)
            {
                <!-- Payment Step -->
                <div class="payment-section">
                    <h4>Payment Information</h4>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">@successMessage</div>
                    }
                    <div class="customer-summary">
                        <p><strong>Customer:</strong> @customerName</p>
                        <p><strong>Delivery Date:</strong> @deliveryDateDisplay</p>
                        <p><strong>Delivery Address:</strong> @deliveryAddress</p>
                        <p><strong>Email:</strong> @customerEmail</p>
                        @if (!string.IsNullOrEmpty(customerPhone))
                        {
                            <p><strong>Phone:</strong> @customerPhone</p>
                        }
                        @if (!string.IsNullOrEmpty(additionalInformation))
                        {
                            <p><strong>Additional Information:</strong> @additionalInformation</p>
                        }
                        <p><strong>Marketing Consent:</strong> @(consentToUpdates ? "Yes - will receive updates" : "No - will not receive updates")</p>
                    </div>
                    <div class="form-group">
                        <label class="card-info-label">Card Information</label>
                        <div id="card-container" style="min-height: 60px; border: 1px solid #ddd; border-radius: 4px; padding: 10px; background-color: #f8f9fa;"></div>
                    </div>
                    <div class="tip-section">
                        <h5>Add a Tip</h5>
                        <div class="tip-percentage-row">
                            <button type="button" class="tip-btn @(selectedTipType == "percentage" && selectedTipPercentage == 15 ? "active" : "")" 
                                    @onclick="() => SelectPercentageTip(15)">
                                15%<br />
                                <small>$@(CalculatePercentageTip(15).ToString("F2"))</small>
                            </button>
                            <button type="button" class="tip-btn @(selectedTipType == "percentage" && selectedTipPercentage == 20 ? "active" : "")" 
                                    @onclick="() => SelectPercentageTip(20)">
                                20%<br />
                                <small>$@(CalculatePercentageTip(20).ToString("F2"))</small>
                            </button>
                            <button type="button" class="tip-btn @(selectedTipType == "percentage" && selectedTipPercentage == 25 ? "active" : "")" 
                                    @onclick="() => SelectPercentageTip(25)">
                                25%<br />
                                <small>$@(CalculatePercentageTip(25).ToString("F2"))</small>
                            </button>
                        </div>
                        <div class="tip-custom-row">
                            <div class="custom-tip-container">
                                <div class="currency-input-wrapper @(selectedTipType == "custom" ? "active" : "")" @onclick="SelectCustomTip">
                                    @if (selectedTipType == "custom")
                                    {
                                        <span class="currency-symbol">$</span>
                                        <input type="number" @bind="customTipAmount" @bind:event="oninput" @ref="customTipInputRef"
                                               class="custom-tip-input active" 
                                               step="0.01" min="0" max="999.99" />
                                    }
                                    else
                                    {
                                        <span class="custom-amount-text">Custom Amount</span>
                                    }
                                </div>
                            </div>
                            <button type="button" class="tip-btn no-tip @(selectedTipType == "none" ? "active" : "")" 
                                    @onclick="SelectNoTip">
                                No Tip
                            </button>
                        </div>
                    </div>
                    <div class="payment-buttons">
                        <button class="btn btn-secondary me-2" @onclick="BackToCustomerInfo" disabled="@isProcessing">
                            Back
                        </button>
                        <button class="complete-order-btn btn btn-primary" @onclick="ProcessPayment" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Complete Order: $@(GetTotalWithTip().ToString("F2"))
                        </button>
                    </div>
                </div>
            }
            else if (currentStep == 2)
            {
                <!-- Order Confirmation -->
                <div class="order-confirmation">
                    <div class="text-center">
                        <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        <h3 class="text-success">Order Confirmed!</h3>
                        <p>Thank you for your order, @customerName!</p>
                        @if (!string.IsNullOrEmpty(orderConfirmation))
                        {
                            <p><strong>Confirmation:</strong> @orderConfirmation</p>
                        }
                        <a href="/" class="btn btn-primary">Continue Shopping</a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">
            <h4>Your cart is empty</h4>
            <p>Add some items to your cart before checking out.</p>
            <a href="/Menu" class="btn btn-primary">Browse Menu</a>
        </div>
    }
</div>

@code {
    private int currentStep = 0; // 0 = Customer Info, 1 = Payment, 2 = Confirmation
    private string customerName = string.Empty;
    private string customerEmail = string.Empty;
    private string customerPhone = string.Empty;
    private string additionalInformation = string.Empty;
    private string deliveryAddress = string.Empty;
    private string deliveryDateDisplay = string.Empty;
    private string selectedDeliveryDate = string.Empty;
    private List<DateTime> availableDeliveryDates = new();
    private string selectedTipType = "none";
    private int selectedTipPercentage = 0;
    private decimal customTipAmount = 0;
    private ElementReference? customTipInputRef;
    private decimal tipAmount => selectedTipType switch
    {
        "percentage" => CalculatePercentageTip(selectedTipPercentage),
        "custom" => customTipAmount,
        _ => 0
    };

    private decimal CalculatePercentageTip(int percentage)
    {
        return cartTotal * (percentage / 100.0m);
    }

    private decimal GetTotalWithTip()
    {
        return cartTotal + tipAmount;
    }

    private void SelectPercentageTip(int percentage)
    {
        selectedTipType = "percentage";
        selectedTipPercentage = percentage;
        customTipAmount = 0;
        StateHasChanged();
    }

    private async Task SelectCustomTip()
    {
        selectedTipType = "custom";
        selectedTipPercentage = 0;
        StateHasChanged();
        
        // Focus the input after the DOM updates
        await Task.Delay(50);
        if (customTipInputRef.HasValue)
        {
            await customTipInputRef.Value.FocusAsync();
        }
    }

    private void SelectNoTip()
    {
        selectedTipType = "none";
        selectedTipPercentage = 0;
        customTipAmount = 0;
        StateHasChanged();
    }
    private string _streetAddress = string.Empty;
    private string streetAddress
    {
        get => _streetAddress;
        set
        {
            _streetAddress = value;
            ResetAddressValidation();
        }
    }

    private string _city = string.Empty;
    private string city
    {
        get => _city;
        set
        {
            _city = value;
            ResetAddressValidation();
        }
    }

    private string _state = "Florida";
    private string state
    {
        get => _state;
        set
        {
            _state = value;
            ResetAddressValidation();
        }
    }

    private string _zipCode = string.Empty;
    private string zipCode
    {
        get => _zipCode;
        set
        {
            _zipCode = value;
            ResetAddressValidation();
        }
    }
    
    private bool consentToUpdates = false;
    private bool isProcessing = false;
    private bool isPaymentInitialized = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string orderConfirmation = string.Empty;
    
    // Delivery validation properties
    private string deliveryValidationMessage = string.Empty;
    private bool isInDeliveryArea = false;
    private string deliveryValidationCssClass = string.Empty;
    
    private const decimal minimumOrder = 35.00m;
    private decimal cartTotal => Cart?.Items?.Where(i => i != null).Sum(i => i?.GetTotalPrice() ?? 0) ?? 0m;

    protected override void OnInitialized()
    {
        // Get the next two available delivery dates from DeadlineService
        var now = DateTime.Now;
        availableDeliveryDates = DeadlineService.GetUpcomingDeliveryWednesdays(now);
        
        // Initialize delivery date from OrderContext or default to first available
        if (OrderContext.SelectedDate.HasValue && availableDeliveryDates.Contains(OrderContext.SelectedDate.Value))
        {
            SelectedDeliveryDate = OrderContext.SelectedDate.Value.ToString("yyyy-MM-dd");
        }
        else if (availableDeliveryDates.Count > 0)
        {
            SelectedDeliveryDate = availableDeliveryDates[0].ToString("yyyy-MM-dd");
        }
        
        // Initialize address from OrderContext if available
        if (!string.IsNullOrEmpty(OrderContext.Address))
        {
            ParseAddressFromContext(OrderContext.Address);
            
            // Check if this address has already been validated on another page
            if (DeliveryValidation.IsAddressAlreadyValidated(OrderContext.Address))
            {
                isInDeliveryArea = DeliveryValidation.LastValidationResult?.IsInDeliveryArea ?? false;
                deliveryValidationMessage = DeliveryValidation.LastValidationResult?.Message ?? string.Empty;
                deliveryValidationCssClass = DeliveryValidation.LastValidationResult?.ResultType switch
                {
                    "success" => "alert alert-success",
                    "warning" => "alert alert-warning", 
                    "error" => "alert alert-danger",
                    _ => string.Empty
                };
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (currentStep == 1 && !isPaymentInitialized)
        {
            await InitializePayments();
        }
    }

    private void ParseAddressFromContext(string address)
    {
        // Parse the address format from DeliveryArea: "Street, City, State ZipCode"
        var parts = address.Split(',');
        if (parts.Length >= 3)
        {
            streetAddress = parts[0].Trim();
            city = parts[1].Trim();
            
            var stateZip = parts[2].Trim().Split(' ');
            if (stateZip.Length >= 2)
            {
                state = stateZip[0];
                zipCode = stateZip[1];
            }
        }
        
        // Update deliveryAddress for the API
        UpdateDeliveryAddress();
    }

    private void UpdateDeliveryAddress()
    {
        deliveryAddress = $"{streetAddress}, {city}, {state} {zipCode}".Trim();
    }

    private bool IsValidPhoneNumber(string phoneNumber)
    {
        if (string.IsNullOrWhiteSpace(phoneNumber))
            return false;

        // Remove all non-digit characters
        string digitsOnly = new string(phoneNumber.Where(char.IsDigit).ToArray());
        
        // Check if it's exactly 10 digits
        return digitsOnly.Length == 10;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;

        // Basic email validation: contains @ and has text before and after @
        var atIndex = email.IndexOf('@');
        if (atIndex <= 0 || atIndex >= email.Length - 1)
            return false;

        // Check for only one @ symbol
        if (email.LastIndexOf('@') != atIndex)
            return false;

        // Check for at least one dot after the @
        var domainPart = email.Substring(atIndex + 1);
        if (!domainPart.Contains('.') || domainPart.EndsWith('.'))
            return false;

        // Basic character validation (no spaces, basic valid email characters)
        return !email.Contains(' ') && email.All(c => char.IsLetterOrDigit(c) || ".-_@".Contains(c));
    }

    private bool IsCustomerInfoValid()
    {
        return !string.IsNullOrWhiteSpace(customerName) &&
               IsValidEmail(customerEmail) &&
               IsValidPhoneNumber(customerPhone) &&
               !string.IsNullOrWhiteSpace(streetAddress) &&
               !string.IsNullOrWhiteSpace(city) &&
               !string.IsNullOrWhiteSpace(zipCode) &&
               !string.IsNullOrWhiteSpace(SelectedDeliveryDate) &&
               cartTotal >= minimumOrder &&
               isInDeliveryArea; // Require address validation
    }

    private string GetProceedButtonTooltip()
    {
        if (cartTotal < minimumOrder)
            return $"${minimumOrder:F2} minimum order required for delivery";
        
        if (string.IsNullOrWhiteSpace(customerName) || 
            string.IsNullOrWhiteSpace(streetAddress) ||
            string.IsNullOrWhiteSpace(city) ||
            string.IsNullOrWhiteSpace(zipCode) ||
            string.IsNullOrWhiteSpace(SelectedDeliveryDate))
            return "Please fill in all required fields";
        
        if (!IsValidEmail(customerEmail))
            return "Please enter a valid email address";
            
        if (!IsValidPhoneNumber(customerPhone))
            return "Please enter a valid 10-digit phone number";
        
        if (!isInDeliveryArea)
            return "Please verify your delivery address using the 'Check Delivery Area' button";
        
        return "";
    }

    private string SelectedDeliveryDate
    {
        get => selectedDeliveryDate;
        set
        {
            selectedDeliveryDate = value;
            if (DateTime.TryParse(value, out var selectedDate))
            {
                deliveryDateDisplay = selectedDate.ToString("MMMM dd, yyyy (dddd)");
                // Update OrderContext
                OrderContext.SelectedDate = selectedDate;
            }
        }
    }

    private void ProceedToPayment()
    {
        if (cartTotal < minimumOrder)
        {
            errorMessage = $"${minimumOrder:F2} minimum order required for delivery. Please add more items to your cart.";
            return;
        }
        
        if (!IsCustomerInfoValid())
        {
            errorMessage = "Please fill in all required fields.";
            return;
        }
        
        // Update the combined delivery address
        UpdateDeliveryAddress();
        
        errorMessage = string.Empty;
        currentStep = 1;
        StateHasChanged();
    }

    private async Task BackToCustomerInfo()
    {
        currentStep = 0;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        if (isPaymentInitialized)
        {
            await PaymentService.DestroyAsync();
            isPaymentInitialized = false;
        }
    }

    private async Task InitializePayments()
    {
        if (isPaymentInitialized) return;
        try
        {
            await PaymentService.DestroyAsync();
            var initResult = await PaymentService.InitializeAsync();
            if (!initResult.Success)
            {
                errorMessage = "Failed to initialize payments";
                StateHasChanged();
                return;
            }
            var cardResult = await PaymentService.InitializeCardAsync("card-container");
            if (!cardResult.Success)
            {
                errorMessage = "Failed to initialize card form";
                StateHasChanged();
                    return;
                }
            isPaymentInitialized = true;
            StateHasChanged();
        }
    catch (Exception)
        {
            errorMessage = "Error initializing payments";
            StateHasChanged();
        }
    }

    private async Task ProcessPayment()
    {
        if (!isPaymentInitialized)
        {
            errorMessage = "Payment system not initialized";
            return;
        }
        isProcessing = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();
        try
        {
            var tokenResult = await PaymentService.TokenizeCardAsync();
            if (tokenResult.Success && !string.IsNullOrEmpty(tokenResult.Token))
            {
                var orderRequest = new CreateOrderRequest
                {
                    CustomerName = customerName,
                    CustomerEmail = customerEmail,
                    DeliveryAddress = deliveryAddress,
                    DeliveryDate = deliveryDateDisplay,
                    CustomerPhone = customerPhone ?? string.Empty,
                    AdditionalInformation = additionalInformation ?? string.Empty,
                    ConsentToUpdates = consentToUpdates,
                    Total = GetTotalWithTip(),
                    TipAmount = tipAmount,
                    PaymentToken = tokenResult.Token,
                    Items = Cart?.Items?.Where(i => i != null && i.Item != null).Select(item => new OrderItemRequest
                    {
                        ItemName = item.Item.Name,
                        Category = item.Item.Category,
                        Price = item.GetUnitPrice(),
                        Quantity = item.Quantity,
                        SelectedServes = item.SelectedServes,
                        UpgradePhadThai24Qty = item.UpgradePhadThai24Qty,
                        UpgradePhadThai48Qty = item.UpgradePhadThai48Qty
                    }).ToList() ?? new List<OrderItemRequest>()
                };
                try
                {
                    var apiResult = await OrderApi.CreateOrderAsync(orderRequest);
                    if (apiResult.Success && apiResult.Data != null)
                    {
                        // Payment and order both successful
                        orderConfirmation = apiResult.Data.OrderNumber;
                        successMessage = "Payment processed and order saved successfully!";
                        if (Cart != null) await Cart.ClearCartAsync();
                        currentStep = 2;
                        StateHasChanged();
                        return;
                    }
                    else
                    {
                        // Payment tokenized but API failed
                        errorMessage = $"Payment processing failed. Please try again or contact support.";
                        return;
                    }
                }
                catch (Exception)
                {
                    // Payment tokenized but API threw exception
                    errorMessage = $"Payment processing failed. Please try again or contact support.";
                    return;
                }
            }
            else
            {
                // Card tokenization failed
                var errors = tokenResult.Errors != null ? string.Join(", ", tokenResult.Errors.Select(e => e.ToString())) : tokenResult.Error ?? "Unknown card validation error";
                errorMessage = "Card validation failed: Please check your card information and try again.";
                return;
            }
        }
    catch (Exception)
        {
            errorMessage = $"Error processing payment.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task CheckDeliveryArea()
    {
        try
        {
            var fullAddress = $"{streetAddress}, {city}, {state} {zipCode}";
            var result = await DeliveryValidation.ValidateDeliveryAddress(fullAddress);
            
            isInDeliveryArea = result.IsInDeliveryArea;
            deliveryValidationMessage = result.Message;
            
            // Set CSS class based on result type
            deliveryValidationCssClass = result.ResultType switch
            {
                "success" => "alert alert-success",
                "warning" => "alert alert-warning", 
                "error" => "alert alert-danger",
                _ => "alert alert-info"
            };
            
            StateHasChanged();
        }
    catch (Exception)
        {
            deliveryValidationMessage = $"Error checking delivery area.";
            deliveryValidationCssClass = "alert alert-danger";
            isInDeliveryArea = false;
            StateHasChanged();
        }
    }

    private void ResetAddressValidation()
    {
        // Reset validation state when address changes
        isInDeliveryArea = false;
        deliveryValidationMessage = string.Empty;
        deliveryValidationCssClass = string.Empty;
    }
}