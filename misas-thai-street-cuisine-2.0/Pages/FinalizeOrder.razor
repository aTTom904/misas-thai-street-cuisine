@page "/FinalizeOrder"
@using misas_thai_street_cuisine_2._0.Models
@using misas_thai_street_cuisine_2._0.Services
@inject ShoppingCartService Cart
@inject SquarePaymentService PaymentService
@inject OrderApiService OrderApi
@inject OrderContextService OrderContext
@inject DeadlineService DeadlineService

<div class="checkout-container">
    <h2>Checkout</h2>
    @if ((Cart?.Items != null && Cart.Items.Count > 0) || currentStep == 2)
    {
        <div class="checkout-content">
            @if (currentStep != 2)
            {
                <!-- Order Summary (only show on steps 0 and 1) -->
                <div class="order-summary">
                    <h4>Order Summary</h4>
                    <div class="cart-items">
                        @if (Cart?.Items != null)
                        {
                            @foreach (var item in Cart.Items)
                            {
                                if (item != null && item.Item != null)
                                {
                                    <div class="cart-item">
                                        <div class="item-info">
                                            <span class="item-name">@item.Item.Name</span>
                                            <span class="item-price">$@item.GetUnitPrice().ToString("F2")</span>
                                        </div>
                                        <div class="item-quantity">Qty: @item.Quantity</div>
                                        <div class="item-total">$@(item.GetTotalPrice().ToString("F2"))</div>
                                    </div>
                                }
                                else
                                {
                                    <div class="cart-item">
                                        <span class="item-name text-danger">Invalid item</span>
                                    </div>
                                }
                            }
                        }
                    </div>
                    <div class="total-section">
                        <strong>Total: $@((Cart?.Items?.Where(i => i != null).Sum(i => i?.GetTotalPrice() ?? 0) ?? 0).ToString("F2"))</strong>
                    </div>
                </div>
            }

            @if (currentStep == 0)
            {
                <!-- Customer Information Step -->
                <div class="customer-info">
                    <h4>Customer Information</h4>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    <div class="form-group">
                        <label>Delivery Date *</label>
                        <select @bind="SelectedDeliveryDate" class="form-control delivery-date-select" required>
                            <option value="">Select a delivery date</option>
                            @foreach (var date in availableDeliveryDates)
                            {
                                <option value="@date.ToString("yyyy-MM-dd")">@date.ToString("MMMM dd, yyyy (dddd)")</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Full Name *</label>
                        <input type="text" @bind="customerName" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label>Email *</label>
                        <input type="email" @bind="customerEmail" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label>Phone</label>
                        <input type="tel" @bind="customerPhone" class="form-control" />
                    </div>
                    <div class="delivery-address-section">
                        <label>Delivery Address *</label>
                        <div class="address-fields">
                            <input type="text" @bind="streetAddress" class="form-control address-input" placeholder="Street Address" required />
                            <div class="city-state-zip">
                                <input type="text" @bind="city" class="form-control city-input" placeholder="City" required />
                                <select @bind="state" class="form-control state-input" required>
                                    <option value="Florida">Florida</option>
                                </select>
                                <input type="text" @bind="zipCode" class="form-control zip-input" placeholder="Zip Code" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-group consent-section">
                        <div class="form-check">
                            <input type="checkbox" @bind="consentToUpdates" class="form-check-input" id="consentCheckbox" />
                            <label class="form-check-label" for="consentCheckbox">
                                I consent to receive promotional emails and text messages about special offers, new menu items, and restaurant updates from Misa's Thai Street Cuisine.
                            </label>
                        </div>
                        <small class="form-text text-muted">
                            You can unsubscribe at any time. Standard message and data rates may apply for text messages.
                        </small>
                    </div>
                    <div class="button-container">
                        <button class="btn btn-primary" @onclick="ProceedToPayment" disabled="@(!IsCustomerInfoValid())">
                            Proceed to Payment
                        </button>
                    </div>
                </div>
            }
            else if (currentStep == 1)
            {
                <!-- Payment Step -->
                <div class="payment-section">
                    <h4>Payment Information</h4>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">@successMessage</div>
                    }
                    <div class="customer-summary">
                        <p><strong>Customer:</strong> @customerName</p>
                        <p><strong>Delivery Date:</strong> @deliveryDateDisplay</p>
                        <p><strong>Delivery Address:</strong> @deliveryAddress</p>
                        <p><strong>Email:</strong> @customerEmail</p>
                        @if (!string.IsNullOrEmpty(customerPhone))
                        {
                            <p><strong>Phone:</strong> @customerPhone</p>
                        }
                        <p><strong>Marketing Consent:</strong> @(consentToUpdates ? "Yes - will receive updates" : "No - will not receive updates")</p>
                    </div>
                    <div class="form-group">
                        <label>Card Information</label>
                        <div id="card-container" style="min-height: 60px; border: 1px solid #ddd; border-radius: 4px; padding: 10px; background-color: #f8f9fa;"></div>
                    </div>
                    <div class="payment-buttons">
                        <button class="btn btn-secondary me-2" @onclick="BackToCustomerInfo" disabled="@isProcessing">
                            Back
                        </button>
                        <button class="complete-order-btn btn btn-success" @onclick="ProcessPayment" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Complete Order - $@((Cart?.Items?.Where(i => i != null).Sum(i => i?.GetTotalPrice() ?? 0) ?? 0).ToString("F2"))
                        </button>
                    </div>
                </div>
            }
            else if (currentStep == 2)
            {
                <!-- Order Confirmation -->
                <div class="order-confirmation">
                    <div class="text-center">
                        <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        <h3 class="text-success">Order Confirmed!</h3>
                        <p>Thank you for your order, @customerName!</p>
                        @if (!string.IsNullOrEmpty(orderConfirmation))
                        {
                            <p><strong>Confirmation:</strong> @orderConfirmation</p>
                        }
                        <a href="/" class="btn btn-primary">Continue Shopping</a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">
            <h4>Your cart is empty</h4>
            <p>Add some items to your cart before checking out.</p>
            <a href="/Menu" class="btn btn-primary">Browse Menu</a>
        </div>
    }
</div>

@code {
    private int currentStep = 0; // 0 = Customer Info, 1 = Payment, 2 = Confirmation
    private string customerName = string.Empty;
    private string customerEmail = string.Empty;
    private string customerPhone = string.Empty;
    private string deliveryAddress = string.Empty;
    private string deliveryDateDisplay = string.Empty;
    private string selectedDeliveryDate = string.Empty;
    private List<DateTime> availableDeliveryDates = new();
    
    // Address components
    private string streetAddress = string.Empty;
    private string city = string.Empty;
    private string state = "Florida";
    private string zipCode = string.Empty;
    
    private bool consentToUpdates = false;
    private bool isProcessing = false;
    private bool isPaymentInitialized = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string orderConfirmation = string.Empty;

    protected override void OnInitialized()
    {
        // Get the next two available delivery dates from DeadlineService
        var now = DateTime.Now;
        availableDeliveryDates = DeadlineService.GetUpcomingDeliveryWednesdays(now);
        
        // Initialize delivery date from OrderContext or default to first available
        if (OrderContext.SelectedDate.HasValue && availableDeliveryDates.Contains(OrderContext.SelectedDate.Value))
        {
            SelectedDeliveryDate = OrderContext.SelectedDate.Value.ToString("yyyy-MM-dd");
        }
        else if (availableDeliveryDates.Count > 0)
        {
            SelectedDeliveryDate = availableDeliveryDates[0].ToString("yyyy-MM-dd");
        }
        
        // Initialize address from OrderContext if available
        if (!string.IsNullOrEmpty(OrderContext.Address))
        {
            ParseAddressFromContext(OrderContext.Address);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (currentStep == 1 && !isPaymentInitialized)
        {
            await InitializePayments();
        }
    }

    private void ParseAddressFromContext(string address)
    {
        // Parse the address format from DeliveryArea: "Street, City, State ZipCode"
        var parts = address.Split(',');
        if (parts.Length >= 3)
        {
            streetAddress = parts[0].Trim();
            city = parts[1].Trim();
            
            var stateZip = parts[2].Trim().Split(' ');
            if (stateZip.Length >= 2)
            {
                state = stateZip[0];
                zipCode = stateZip[1];
            }
        }
        
        // Update deliveryAddress for the API
        UpdateDeliveryAddress();
    }

    private void UpdateDeliveryAddress()
    {
        deliveryAddress = $"{streetAddress}, {city}, {state} {zipCode}".Trim();
    }

    private bool IsCustomerInfoValid()
    {
        return !string.IsNullOrWhiteSpace(customerName) &&
               !string.IsNullOrWhiteSpace(customerEmail) &&
               customerEmail.Contains("@") &&
               !string.IsNullOrWhiteSpace(streetAddress) &&
               !string.IsNullOrWhiteSpace(city) &&
               !string.IsNullOrWhiteSpace(zipCode) &&
               !string.IsNullOrWhiteSpace(SelectedDeliveryDate);
    }

    private string SelectedDeliveryDate
    {
        get => selectedDeliveryDate;
        set
        {
            selectedDeliveryDate = value;
            if (DateTime.TryParse(value, out var selectedDate))
            {
                deliveryDateDisplay = selectedDate.ToString("MMMM dd, yyyy (dddd)");
                // Update OrderContext
                OrderContext.SelectedDate = selectedDate;
            }
        }
    }

    private void ProceedToPayment()
    {
        if (!IsCustomerInfoValid())
        {
            errorMessage = "Please fill in all required fields.";
            return;
        }
        
        // Update the combined delivery address
        UpdateDeliveryAddress();
        
        errorMessage = string.Empty;
        currentStep = 1;
        StateHasChanged();
    }

    private async Task BackToCustomerInfo()
    {
        currentStep = 0;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        if (isPaymentInitialized)
        {
            await PaymentService.DestroyAsync();
            isPaymentInitialized = false;
        }
    }

    private async Task InitializePayments()
    {
        if (isPaymentInitialized) return;
        try
        {
            await PaymentService.DestroyAsync();
            var initResult = await PaymentService.InitializeAsync();
            if (!initResult.Success)
            {
                errorMessage = $"Failed to initialize payments: {initResult.Error}";
                StateHasChanged();
                return;
            }
            var cardResult = await PaymentService.InitializeCardAsync("card-container");
            if (!cardResult.Success)
            {
                errorMessage = $"Failed to initialize card form: {cardResult.Error}";
                StateHasChanged();
                return;
            }
            isPaymentInitialized = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing payments: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ProcessPayment()
    {
        if (!isPaymentInitialized)
        {
            errorMessage = "Payment system not initialized";
            return;
        }
        isProcessing = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();
        try
        {
            var tokenResult = await PaymentService.TokenizeCardAsync();
            if (tokenResult.Success && !string.IsNullOrEmpty(tokenResult.Token))
            {
                var orderRequest = new CreateOrderRequest
                {
                    CustomerName = customerName,
                    CustomerEmail = customerEmail,
                    DeliveryAddress = deliveryAddress,
                    CustomerPhone = customerPhone ?? string.Empty,
                    ConsentToUpdates = consentToUpdates,
                    Total = Cart?.Items?.Where(i => i != null).Sum(i => i?.GetTotalPrice() ?? 0) ?? 0,
                    PaymentToken = tokenResult.Token,
                    Items = Cart?.Items?.Where(i => i != null && i.Item != null).Select(item => new OrderItemRequest
                    {
                        ItemName = item.Item.Name,
                        Category = item.Item.Category,
                        Price = item.GetUnitPrice(),
                        Quantity = item.Quantity
                    }).ToList() ?? new List<OrderItemRequest>()
                };
                try
                {
                    var apiResult = await OrderApi.CreateOrderAsync(orderRequest);
                    if (apiResult.Success && apiResult.Data != null)
                    {
                        orderConfirmation = apiResult.Data.OrderNumber;
                        successMessage = "Payment processed and order saved successfully!";
                    }
                    else
                    {
                        orderConfirmation = $"ORDER-{DateTime.Now:yyyyMMdd}-{new Random().Next(1000, 9999)}";
                        successMessage = "Payment processed successfully!";
                    }
                }
                catch (Exception)
                {
                    orderConfirmation = $"ORDER-{DateTime.Now:yyyyMMdd}-{new Random().Next(1000, 9999)}";
                    successMessage = "Payment processed successfully!";
                }
                Cart?.ClearCart();
                currentStep = 2;
            }
            else
            {
                var errors = tokenResult.Errors != null ? string.Join(", ", tokenResult.Errors.Select(e => e.ToString())) : tokenResult.Error ?? "Unknown error occurred";
                errorMessage = $"Payment failed: {errors}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing payment: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}
