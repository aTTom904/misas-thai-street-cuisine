@page "/Finalize"
@using System.Text.Json
@using misas_thai_street_cuisine_2._0.Services
@inject ShoppingCartService Cart
@inject SquarePaymentService PaymentService
@inject OrderApiService OrderApi
@implements IAsyncDisposable

<div class="checkout-container">
    <h2>Checkout</h2>
    
    @if (Cart.Items.Any())
    {
        <div class="checkout-content">
            <!-- Order Summary -->
            <div class="order-summary">
                <h4>Order Summary</h4>
                <div class="cart-items">
                    @foreach (var item in Cart.Items)
                    {
                        <div class="cart-item">
                            <div class="item-info">
                                <span class="item-name">@item.Item.Name</span>
                                <span class="item-price">$@item.Item.Price.ToString("F2")</span>
                            </div>
                            <div class="item-quantity">
                                Qty: @item.Quantity
                            </div>
                            <div class="item-total">
                                $@((item.Item.Price * item.Quantity).ToString("F2"))
                            </div>
                        </div>
                    }
                </div>
                <div class="total-section">
                    <strong>Total: $@GetTotal().ToString("F2")</strong>
                </div>
            </div>

            @if (currentStep == 0)
            {
                <!-- Customer Information Step -->
                <div class="customer-info">
                    <h4>Customer Information</h4>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <div class="form-group">
                        <label>Full Name *</label>
                        <input type="text" @bind="customerName" class="form-control" required />
                    </div>
                    
                    <div class="form-group">
                        <label>Email *</label>
                        <input type="email" @bind="customerEmail" class="form-control" required />
                    </div>
                    
                    <div class="form-group">
                        <label>Phone</label>
                        <input type="tel" @bind="customerPhone" class="form-control" />
                    </div>

                    <div class="form-group consent-section">
                        <div class="form-check">
                            <input type="checkbox" @bind="consentToUpdates" class="form-check-input" id="consentCheckbox" />
                            <label class="form-check-label" for="consentCheckbox">
                                I consent to receive promotional emails and text messages about special offers, new menu items, and restaurant updates from Misa's Thai Street Cuisine.
                            </label>
                        </div>
                        <small class="form-text text-muted">
                            You can unsubscribe at any time. Standard message and data rates may apply for text messages.
                        </small>
                    </div>

                    <button class="btn btn-primary" @onclick="ProceedToPayment" disabled="@(!IsCustomerInfoValid())">
                        Proceed to Payment
                    </button>
                </div>
            }
            else if (currentStep == 1)
            {
                <!-- Payment Step -->
                <div class="payment-section">
                    <h4>Payment Information</h4>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">@successMessage</div>
                    }

                    <div class="customer-summary">
                        <p><strong>Customer:</strong> @customerName</p>
                        <p><strong>Email:</strong> @customerEmail</p>
                        @if (!string.IsNullOrEmpty(customerPhone))
                        {
                            <p><strong>Phone:</strong> @customerPhone</p>
                        }
                        <p><strong>Marketing Consent:</strong> @(consentToUpdates ? "Yes - will receive updates" : "No - will not receive updates")</p>
                    </div>

                    <div class="form-group">
                        <label>Card Information</label>
                        <div id="card-container" style="min-height: 60px; border: 1px solid #ddd; border-radius: 4px; padding: 10px; background-color: #f8f9fa;"></div>
                    </div>

                    <div class="payment-buttons">
                        <button class="btn btn-secondary me-2" @onclick="BackToCustomerInfo" disabled="@isProcessing">
                            Back
                        </button>
                        <button class="btn btn-success" @onclick="ProcessPayment" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Complete Order - $@GetTotal().ToString("F2")
                        </button>
                    </div>
                </div>
            }
            else if (currentStep == 2)
            {
                <!-- Order Confirmation -->
                <div class="order-confirmation">
                    <div class="text-center">
                        <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        <h3 class="text-success">Order Confirmed!</h3>
                        <p>Thank you for your order, @customerName!</p>
                        @if (!string.IsNullOrEmpty(orderConfirmation))
                        {
                            <p><strong>Confirmation:</strong> @orderConfirmation</p>
                        }
                        <a href="/" class="btn btn-primary">Continue Shopping</a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">
            <h4>Your cart is empty</h4>
            <p>Add some items to your cart before checking out.</p>
            <a href="/Menu" class="btn btn-primary">Browse Menu</a>
        </div>
    }
</div>

@code {
    private int currentStep = 0; // 0 = Customer Info, 1 = Payment, 2 = Confirmation
    
    // Customer Information
    private string customerName = string.Empty;
    private string customerEmail = string.Empty;
    private string customerPhone = string.Empty;
    private bool consentToUpdates = false;
    
    // Payment State
    private bool isProcessing = false;
    private bool isPaymentInitialized = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string orderConfirmation = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (currentStep == 1 && !isPaymentInitialized)
        {
            await InitializePayments();
        }
    }

    private bool IsCustomerInfoValid()
    {
        return !string.IsNullOrWhiteSpace(customerName) && 
               !string.IsNullOrWhiteSpace(customerEmail) &&
               customerEmail.Contains("@");
    }

    private decimal GetTotal()
    {
        return Cart.Items.Sum(item => item.Item.Price * item.Quantity);
    }

    private async Task ProceedToPayment()
    {
        if (!IsCustomerInfoValid())
        {
            errorMessage = "Please fill in all required fields.";
            return;
        }

        errorMessage = string.Empty;
        currentStep = 1;
        StateHasChanged();
        
        // Payment initialization will be handled by OnAfterRenderAsync
    }

    private async Task BackToCustomerInfo()
    {
        currentStep = 0;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        
        // Clean up payment form if it was initialized
        if (isPaymentInitialized)
        {
            await PaymentService.DestroyAsync();
            isPaymentInitialized = false;
        }
    }

    private async Task InitializePayments()
    {
        if (isPaymentInitialized) return;
        
        try
        {
            // Clean up any existing payment form first
            await PaymentService.DestroyAsync();
            
            // Initialize Square Payments
            var initResult = await PaymentService.InitializeAsync();
            if (!initResult.Success)
            {
                errorMessage = $"Failed to initialize payments: {initResult.Error}";
                StateHasChanged();
                return;
            }

            // Initialize the card form
            var cardResult = await PaymentService.InitializeCardAsync("card-container");
            if (!cardResult.Success)
            {
                errorMessage = $"Failed to initialize card form: {cardResult.Error}";
                StateHasChanged();
                return;
            }

            isPaymentInitialized = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing payments: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ProcessPayment()
    {
        if (!isPaymentInitialized)
        {
            errorMessage = "Payment system not initialized";
            return;
        }

        isProcessing = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Tokenize the card
            var tokenResult = await PaymentService.TokenizeCardAsync();
            
            if (tokenResult.Success && !string.IsNullOrEmpty(tokenResult.Token))
            {
                // Create order request for API
                var orderRequest = new CreateOrderRequest
                {
                    CustomerName = customerName,
                    CustomerEmail = customerEmail,
                    CustomerPhone = customerPhone ?? string.Empty,
                    ConsentToUpdates = consentToUpdates,
                    Total = GetTotal(),
                    PaymentToken = tokenResult.Token,
                    Items = Cart.Items.Select(item => new OrderItemRequest
                    {
                        ItemName = item.Item.Name,
                        Category = item.Item.Category,
                        Price = item.Item.Price,
                        Quantity = item.Quantity
                    }).ToList()
                };

                // Try to save order to database via API
                try
                {
                    var apiResult = await OrderApi.CreateOrderAsync(orderRequest);
                    
                    if (apiResult.Success && apiResult.Data != null)
                    {
                        // Order saved successfully to database
                        orderConfirmation = apiResult.Data.OrderNumber;
                        successMessage = "Payment processed and order saved successfully!";
                    }
                    else
                    {
                        // Payment succeeded but API call failed - generate fallback order number
                        orderConfirmation = $"ORDER-{DateTime.Now:yyyyMMdd}-{new Random().Next(1000, 9999)}";
                        successMessage = "Payment processed successfully!";
                        // Note: In production, you'd want to log this for manual order entry
                    }
                }
                catch (Exception apiEx)
                {
                    // API call failed but payment succeeded - generate fallback order number
                    orderConfirmation = $"ORDER-{DateTime.Now:yyyyMMdd}-{new Random().Next(1000, 9999)}";
                    successMessage = "Payment processed successfully!";
                    // In production, log this: Console.WriteLine($"API Error: {apiEx.Message}");
                }
                
                // Clear the cart and move to confirmation
                Cart.ClearCart();
                currentStep = 2;
            }
            else
            {
                var errors = tokenResult.Errors != null ? 
                    string.Join(", ", tokenResult.Errors.Select(e => e.ToString())) : 
                    tokenResult.Error ?? "Unknown error occurred";
                errorMessage = $"Payment failed: {errors}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing payment: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (isPaymentInitialized)
        {
            await PaymentService.DestroyAsync();
        }
    }
}

<style>
    .checkout-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
    }

    .checkout-content {
        display: grid;
        gap: 2rem;
    }

    .order-summary {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .cart-items {
        margin-bottom: 1rem;
    }

    .cart-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid #eee;
    }

    .cart-item:last-child {
        border-bottom: none;
    }

    .item-info {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .item-name {
        font-weight: bold;
        color: #333;
    }

    .item-price {
        color: #666;
        font-size: 0.9rem;
    }

    .item-quantity, .item-total {
        margin-left: 1rem;
        font-weight: bold;
    }

    .total-section {
        border-top: 2px solid #ee6900;
        padding-top: 1rem;
        margin-top: 1rem;
        font-size: 1.2rem;
    }

    .customer-info, .payment-section {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        font-weight: bold;
        margin-bottom: 0.5rem;
        display: block;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    .consent-section {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 4px;
        border: 1px solid #e9ecef;
        margin: 1.5rem 0;
    }

    .form-check {
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .form-check-input {
        margin-top: 0.25rem;
        flex-shrink: 0;
    }

    .form-check-label {
        font-weight: normal !important;
        line-height: 1.4;
        margin-bottom: 0.5rem !important;
        cursor: pointer;
    }

    .form-text {
        font-size: 0.875rem;
        margin-top: 0.5rem;
        display: block;
    }

    .customer-summary {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 4px;
        margin-bottom: 1.5rem;
    }

    .payment-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }

    .order-confirmation {
        text-align: center;
        padding: 3rem;
        background: white;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .empty-cart {
        text-align: center;
        padding: 3rem;
    }

    #card-container {
        background-color: #f8f9fa !important;
    }
</style>
