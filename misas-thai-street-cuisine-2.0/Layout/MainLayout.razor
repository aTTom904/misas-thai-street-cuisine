@namespace misas_thai_street_cuisine_2._0.Layout
@inherits LayoutComponentBase

@inject ShoppingCartService Cart


<div class="layout-container">
    <header class="navbar minimal-navbar">
        <div class="logo-hamburger">
            <a href="/" class="logo-link">
                <img src="/Resources/Images/Logos/ORNG M RED CHILI.png" alt="Logo" class="logo" />
            </a>
            <div class="hamburger-menu" @onclick="ToggleMobileMenu">
                <i class="fas fa-bars"></i>
            </div>
        </div>
        <div class="countdown right-countdown">
            <span class="countdown-text">
                <span class="countdown-line-1">Order Deadline:</span>
                <span class="countdown-line-2">@CountdownText</span>
            </span>
        </div>
    </header>
    @if (isMobileMenuVisible)
    {
        <div id="mobile-nav-wrapper" @onclick="() => isMobileMenuVisible = false">
            <div class="mobile-nav slide-down">
                <a href="/menu">Menu</a>
                <a href="/gallery">Gallery</a>
                <a href="/about">About</a>
                <a href="/contact">Contact</a>
            </div>
        </div>
    }

    <div class="main-content" @onclick="() => isMobileMenuVisible = false">
        @Body
    </div>
</div>

<footer class="footer">
    <div class="footer-content">
        <div class="footer-left">
            <p>&copy; @DateTime.Now.Year Misa's Thai Street Cuisine</p>
        </div>
        <div class="footer-right">
            <a href="https://www.facebook.com/misasthaistreetcuisine" target="_blank" rel="noopener" aria-label="Facebook"><i class="fab fa-facebook-f"></i></a>
            <a href="https://www.instagram.com/misasthaistreetcuisine/" target="_blank" rel="noopener" aria-label="Instagram"><i class="fab fa-instagram"></i></a>
            <a href="mailto:info@misasthaistreetcuisine.com" aria-label="Email"><i class="fas fa-envelope"></i></a>
        </div>
    </div>
</footer>



@code {
    private bool isMobileMenuVisible = false;
    private int CartItemCount = 0;
    private string CountdownText = "Calculating...";
    private Timer? countdownTimer;

    private void ToggleMobileMenu()
    {
        isMobileMenuVisible = !isMobileMenuVisible;
    }

    protected override void OnInitialized()
    {
        CartItemCount = GetCartItemCount();
        if (Cart != null)
            Cart.CartChanged += OnCartChanged;
        StartCountdownTimer();
    }

    private void OnCartChanged()
    {
        CartItemCount = GetCartItemCount();
        InvokeAsync(StateHasChanged);
    }

    private int GetCartItemCount()
    {
        return Cart?.Items.Sum(i => i.Quantity) ?? 0;
    }

    private void StartCountdownTimer()
    {
        countdownTimer = new Timer(UpdateCountdown, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void UpdateCountdown(object? state)
    {
        var now = DateTime.Now;
        var nextMonday12PM = GetNextMonday12PM(now);
        var remainingTime = nextMonday12PM - now;

        if (remainingTime.TotalSeconds <= 0)
        {
            CountdownText = "Orders Open!";
            nextMonday12PM = GetNextMonday12PM(now.AddDays(7));
            remainingTime = nextMonday12PM - now;
        }

        if (remainingTime.TotalDays >= 1)
        {
            CountdownText = $"{remainingTime.Days}d {remainingTime.Hours:D2}h {remainingTime.Minutes:D2}m";
        }
        else
        {
            CountdownText = $"{remainingTime.Hours:D2}h {remainingTime.Minutes:D2}m";
        }

        InvokeAsync(StateHasChanged);
    }

    private DateTime GetNextMonday12PM(DateTime from)
    {
        int daysUntilMonday = ((int)DayOfWeek.Monday - (int)from.DayOfWeek + 7) % 7;
        if (from.DayOfWeek == DayOfWeek.Monday && from.TimeOfDay < TimeSpan.FromHours(12))
        {
            return from.Date.AddHours(12);
        }
        if (daysUntilMonday == 0)
        {
            daysUntilMonday = 7;
        }
        return from.Date.AddDays(daysUntilMonday).AddHours(12);
    }

    public void Dispose()
    {
        countdownTimer?.Dispose();
        if (Cart != null)
            Cart.CartChanged -= OnCartChanged;
    }
}