@namespace misas_thai_street_cuisine_2._0.Layout
@inherits LayoutComponentBase

@inject ShoppingCartService Cart
@inject DeadlineService DeadlineService


<div class="layout-container">
    <header class="navbar minimal-navbar @(isHeaderShrunk ? "navbar-shrunk" : "")">
        <div class="logo-hamburger">
            <a href="/" class="logo-link">
                <img src="/Resources/Images/Logos/ORNG M RED CHILI.png" alt="Logo" class="logo" />
            </a>
            @* <div class="hamburger-menu" @onclick="OnHamburgerClick">
                <i class="fas fa-bars"></i>
            </div> *@
        </div>
        <div class="header-right">
            <div class="countdown right-countdown">
                <div class="countdown-wrapper">
                    <div class="countdown-main">
                        <span class="countdown-label-text">Order Deadline:</span>
                        <div class="countdown-text">
                            <span class="countdown-single">@CountdownText</span>
                        </div>
                    </div>
                    <i class="fas fa-circle-info countdown-info-icon" @onclick="() => showTooltip = !showTooltip" tabindex="0"></i>
                    @if (showTooltip)
                    {
                        <div class="countdown-tooltip">This timer shows how much time you have left to place your order to be eligible for the next delivery day. Orders close the Monday before delivery day at 5:00 PM.</div>
                    }
                </div>
            </div>
            <div class="cart-anim-wrapper">
                @if (CartItemCount > 0)
                {
                    <a href="/cart" class="cart-icon-link cart-slide-in" aria-label="View cart">
                        <i class="fas fa-shopping-cart cart-icon"></i>
                        <span class="cart-total">$@Cart.GetTotalPrice().ToString("0.00")</span>
                    </a>
                }
            </div>
        </div>
    </header>
    @if (isMobileMenuVisible)
    {
        <div id="mobile-nav-wrapper" @onclick="() => isMobileMenuVisible = false">
            <div class="mobile-nav slide-down" style="position: absolute; left:@(mobileMenuX)px; top:@(mobileMenuY)px;">
                <a href="/menu">Menu</a>
                <a href="/gallery">Gallery</a>
                <a href="/about">About</a>
                <a href="/contact">Contact</a>
            </div>
        </div>
    }

    <div class="main-content" @onclick="() => isMobileMenuVisible = false">
        @Body
    </div>
</div>

<footer class="footer">
    <div class="footer-left">
        <p>&copy; @DateTime.Now.Year Misa's Thai Street Cuisine</p>
    </div>
    <div class="footer-right">
        <a href="https://www.facebook.com/misasthaistreetcuisine" target="_blank" rel="noopener" aria-label="Facebook"><i class="fab fa-facebook-f"></i></a>
        <a href="https://www.instagram.com/misasthaistreetcuisine/" target="_blank" rel="noopener" aria-label="Instagram"><i class="fab fa-instagram"></i></a>
        <a href="mailto:info@misasthaistreetcuisine.com" aria-label="Email"><i class="fas fa-envelope"></i></a>
    </div>
</footer>



@code {
    private bool isMobileMenuVisible = false;
    private bool showTooltip = false;
    private int CartItemCount = 0;
    private string CountdownText = "Calculating...";
    private Timer? countdownTimer;
    private double mobileMenuX = 0;
    private double mobileMenuY = 0;
    private bool isHeaderShrunk = false;

    [Inject] private IJSRuntime JS { get; set; }

    private async Task OnHamburgerClick(MouseEventArgs e)
    {
        isMobileMenuVisible = !isMobileMenuVisible;
        if (isMobileMenuVisible)
        {
            // Offset a bit for better alignment below the button
            mobileMenuX = e.ClientX;
            mobileMenuY = e.ClientY + 8;
        }
    }

    protected override void OnInitialized()
    {
        CartItemCount = GetCartItemCount();
        if (Cart != null)
            Cart.CartChanged += OnCartChanged;
        StartCountdownTimer();
    }

    private void OnCartChanged()
    {
        CartItemCount = GetCartItemCount();
        InvokeAsync(StateHasChanged);
    }

    private int GetCartItemCount()
    {
        return Cart?.Items.Sum(i => i.Quantity) ?? 0;
    }

    private void StartCountdownTimer()
    {
        countdownTimer = new Timer(UpdateCountdown, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void UpdateCountdown(object? state)
    {
        var now = DateTime.Now;
        // Get next available delivery and deadline
        var (nextDeliveryWednesday, nextDeadlineMonday) = DeadlineService.GetNextAvailableDelivery(now);
        var remainingTime = nextDeadlineMonday - now;

        if (remainingTime.TotalSeconds <= 0)
        {
            CountdownText = "Orders Open!";
            // Get the next available deadline after this one
            var nextMonth = now.AddMonths(1);
            var deadlines = DeadlineService.GetSecondAndFourthMondayDeadline(nextMonth);
            nextDeadlineMonday = deadlines[0];
            remainingTime = nextDeadlineMonday - now;
        }

        CountdownText = $"{remainingTime.Days}d {remainingTime.Hours:D2}h {remainingTime.Minutes:D2}m";

        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("window.misasHeaderScrollInit");
            DotNetObjectReference<MainLayout> objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("window.misasSetHeaderShrinkCallback", objRef);
        }
    }

    [JSInvokable]
    public void SetHeaderShrunk(bool shrunk)
    {
        isHeaderShrunk = shrunk;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        countdownTimer?.Dispose();
        if (Cart != null)
            Cart.CartChanged -= OnCartChanged;
    }
}